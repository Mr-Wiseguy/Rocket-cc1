# Makefile generated by "config-nt.bat"
all.nt: cpp.exe cc1.exe cc1obj.exe xgcc.exe ld.exe stmp-headers libgcc.lib stmp-float_h specs stamp-objlist
# Makefile for GNU C compiler.
#   Copyright (C) 1987, 88, 90-96, 1997 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston MA 02111-1307, USA.

# The targets for external use include:
# all, doc, proto, install, install-cross, install-cross-rest,
# uninstall, TAGS, mostlyclean, clean, distclean, maintainer-clean,
# stage1, stage2, stage3, stage4.

# Suppress smart makes who think they know how to automake Yacc files
.y.c:

# Directory where sources are, from where we are.
srcdir = .
VPATH = .

# Variables that exist for you to override.
# See below for how to change them for certain systems.

# List of language subdirectories.
# This is overridden by configure.
SUBDIRS = cp

# Selection of languages to be made.
# This is overridden by configure.
LANGUAGES = c proto gcov

# Selection of languages to be made during stage1 build.
# This is overridden by configure.
BOOT_LANGUAGES = c

ALLOCA = alloca.o
ALLOCA_FLAGS =
ALLOCA_FINISH =

# Various ways of specifying flags for compilations:  
# CFLAGS is for the user to override to, e.g., do a bootstrap with -O2.
# BOOT_CFLAGS is the value of CFLAGS to pass
# to the stage2 and stage3 compilations
# XCFLAGS is used for most compilations but not when using the GCC just built.
# TCFLAGS is used for compilations with the GCC just built.
XCFLAGS =
TCFLAGS =
CFLAGS =
BOOT_CFLAGS = -O $(CFLAGS)
# These exists to be overridden by the x-* and t-* files, respectively.
X_CFLAGS =
T_CFLAGS =

X_CPPFLAGS =
T_CPPFLAGS =

CC = cl
BISON = bison
BISONFLAGS =
LEX = flex
LEXFLAGS =
AR = ar
AR_FLAGS = rc
LN = copy
DLLTOOL = dlltool
SHELL =
# on sysV, define this as cp.
INSTALL = 
# These permit overriding just for certain files.
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)
MAKEINFO = makeinfo
MAKEINFOFLAGS =
TEXI2DVI = texi2dvi
# For GNUmake: let us decide what gets passed to recursive makes.
MAKEOVERRIDES =

# Define this as & to perform parallel make on a Sequent.
# Note that this has some bugs, and it seems currently necessary 
# to compile all the gen* files first by hand to avoid erroneous results.
P =

# How to invoke ranlib.
RANLIB = ranlib
# Test to use to see whether ranlib exists on the system.
RANLIB_TEST = [ -f /usr/bin/ranlib -o -f /bin/ranlib ]

# Compiler to use for compiling libgcc1.a.
# OLDCC should not be the GNU C compiler,
# since that would compile typical libgcc1.a functions such as mulsi3
# into infinite recursions.
OLDCC = cl

# CFLAGS for use with OLDCC, for compiling libgcc1.a.
# NOTE: -O does not work on some Unix systems!
CCLIBFLAGS = -O

# Version of ar to use when compiling libgcc1.a.
OLDAR = ar
OLDAR_FLAGS = qc

# Target to use when installing include directory.  Either
# install-headers-tar or install-headers-cpio.
INSTALL_HEADERS_DIR = 

# Header files that are made available under the same name
# to programs compiled with GCC.
USER_H = $(srcdir)/ginclude/stdarg.h $(srcdir)/ginclude/stddef.h      $(srcdir)/ginclude/varargs.h $(srcdir)/ginclude/va-alpha.h      $(srcdir)/ginclude/va-h8300.h $(srcdir)/ginclude/va-i860.h      $(srcdir)/ginclude/va-i960.h $(srcdir)/ginclude/va-mips.h      $(srcdir)/ginclude/va-m88k.h $(srcdir)/ginclude/va-mn10200.h      $(srcdir)/ginclude/va-mn10300.h $(srcdir)/ginclude/va-pa.h      $(srcdir)/ginclude/va-pyr.h $(srcdir)/ginclude/va-sparc.h      $(srcdir)/ginclude/va-clipper.h $(srcdir)/ginclude/va-spur.h      $(srcdir)/ginclude/va-m32r.h $(srcdir)/ginclude/va-sh.h      $(srcdir)/ginclude/va-v850.h $(srcdir)/ginclude/va-arc.h      $(srcdir)/ginclude/iso646.h $(srcdir)/ginclude/va-ppc.h      $(srcdir)/ginclude/proto.h $(EXTRA_HEADERS)      $(LANG_EXTRA_HEADERS)

# Target to use whe installing assert.h.  Some systems may
# want to set this empty.
INSTALL_ASSERT_H = install-assert-h

# The GCC to use for compiling libgcc2.a, enquire, and libgcc1-test.
# Usually the one we just built.
# Don't use this as a dependency--use $(GCC_PASSES) or $(GCC_PARTS).
GCC_FOR_TARGET = xgcc

# This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.
# It omits XCFLAGS, and specifies -B./.
# It also specifies -I./include to find, e.g., stddef.h.
GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) -I./include $(TCFLAGS)

# Special flags for compiling enquire.
# We disable optimization to make floating point more reliable.
ENQUIRE_CFLAGS = -DNO_MEM -DNO_LONG_DOUBLE_IO -O0
ENQUIRE_LDFLAGS =

# Sed command to transform gcc to installed name.  Overwritten by configure.
program_transform_name = -e s,x,x,
program_transform_cross_name = -e s,^,$(target_alias)-,

# Tools to use when building a cross-compiler.
# These are used because `configure' appends `cross-make'
# to the makefile when making a cross-compiler.

TARGET_TOOLPREFIX = $(tooldir)/bin/
AR_FOR_TARGET = $(TARGET_TOOLPREFIX)ar
AR_FOR_TARGET_FLAGS = rc
RANLIB_FOR_TARGET = $(TARGET_TOOLPREFIX)ranlib
RANLIB_TEST_FOR_TARGET = [ -f $(TARGET_TOOLPREFIX)ranlib ]

# Dir to search for system headers.  Overridden by cross-make.
SYSTEM_HEADER_DIR = /usr/include

# Control whether to run fixproto.
STMP_FIXPROTO = stmp-fixproto

# Test to see whether <float.h> exists in the system header files,
# and is not derived from GCC.
FLOAT_H_TEST =    [ -f $(SYSTEM_HEADER_DIR)/float.h ] &&    if grep 'ifndef _FLOAT_H___' $(SYSTEM_HEADER_DIR)/float.h >NUL;    then false;    else :; fi

# Test to see whether <limits.h> exists in the system header files.
LIMITS_H_TEST = [ -f $(SYSTEM_HEADER_DIR)/limits.h ]

# There may be a premade insn-attrtab.c for this machine.
# (You could rebuild it with genattrtab.exe as usual, but it takes a long time.)
# PREMADE_ATTRTAB is the file name of the file to use.
# PREMADE_ATTRTAB_MD is the md file it corresponds to.
PREMADE_ATTRTAB_MD = Makefile  # Guaranteed not to cmp equal to md.
PREMADE_ATTRTAB = 

target=Sony PlayStation
target_alias=SonyPlayStation
out_file=config/mips/mips.c
out_object_file=mips.o
md_file=config/mips/mips.md
tm_file=config/mips/psx.h
build_xm_file=config/i386/xm-winnt.h
host_xm_file=config/i386/xm-winnt.h
GCC_THREAD_FILE=
version=2.8.0
mainversion=`sed -e 's/.*\"\([0-9]*\.[0-9]*\).*/\1/' < $(srcdir)\version.c`

# Common prefix for installation directories.
# NOTE: This directory must exist when you start installation.
prefix = 
# Directory in which to put localized header files. On the systems with
# gcc as the native cc, `local_prefix' may not be `prefix' which is
# `/usr'.
# NOTE: local_prefix *should not* default from prefix.
local_prefix = 
# Directory in which to put host dependent programs and libraries
exec_prefix = 
# Directory in which to put the executable for the command `gcc'
bindir = 
# Directory in which to put the directories used by the compiler.
libdir = 
# Directory in which the compiler finds executables, libraries, etc.
libsubdir = $(libdir)/gcc-lib/$(target_alias)/$(version)
# Directory in which the compiler finds g++ includes.
gxx_include_dir= 
# Directory in which the old g++ header files may be found.
old_gxx_include_dir= $(libdir)/g++-include
# Directory to search for site-specific includes.
includedir = $(local_prefix)/include
# assertdir is overridden in cross-make.
# (But this currently agrees with what is in cross-make.)
assertdir = $(tooldir)/include
# where the info files go
infodir = 
# Extension (if any) to put in installed man-page filename.
manext = .1
objext = .o
exeext = .exe

# Directory in which to put man pages.
mandir = 
# Directory in which to find other cross-compilation tools and headers.
# Used in install-cross.
tooldir = $(exec_prefix)/$(target_alias)
# Dir for temp files.
tmpdir = /tmp

# Additional system libraries to link with.
CLIB=

# Change this to a null string if obstacks are installed in the
# system library.
OBSTACK=obstack.o

# Specify the rule for actually making libgcc.a,
LIBGCC = libgcc.a
# and the rule for installing it.
INSTALL_LIBGCC = install-libgcc

# Specify the rule for actually making libgcc1.a.
# The value may be empty; that means to do absolutely nothing
# with or for libgcc1.a.
LIBGCC1 = libgcc1.a

# Specify the rule for making libgcc1.a for a cross-compiler.
# The default rule assumes that libgcc1.a is supplied by the user.
CROSS_LIBGCC1 = libgcc1.cross

# Specify the rule for actually making libgcc2.a.
LIBGCC2 = libgcc2.a

# Options to use when compiling libgcc2.a.
# -g1 causes output of debug info only for file-scope entities.
# we use this here because that should be enough, and also
# so that -g1 will be tested.
LIBGCC2_DEBUG_CFLAGS =1
LIBGCC2_CFLAGS = -O2 $(LIBGCC2_INCLUDES) $(GCC_CFLAGS) $(TARGET_LIBGCC2_CFLAGS) $(LIBGCC2_DEBUG_CFLAGS) -DIN_LIBGCC2 -D__GCC_FLOAT_NOT_NEEDED -fexceptions

# Additional options to use when compiling libgcc2.a.
# Some targets override this to -Iinclude
LIBGCC2_INCLUDES =

# Additional target-dependent options for compiling libgcc2.a.
TARGET_LIBGCC2_CFLAGS = 

# Things which must be built before building libgcc2.a.
# Some targets override this to stmp-int-hdrs
LIBGCC2_DEPS =

# Enquire target (This is a variable so that a target can choose not to
# build it.)
ENQUIRE = enquire.exe

# libgcc1-test target (must also be overridable for a target)
LIBGCC1_TEST = libgcc1-test

# List of extra executables that should be compiled for this target machine
# that are used for compiling from source code to object code.
# The rules for compiling them should be in the t-* file for the machine.
EXTRA_PASSES =

# Like EXTRA_PASSES, but these are used when linking.
EXTRA_PROGRAMS = 

# List of extra object files that should be compiled for this target machine.
# The rules for compiling them should be in the t-* file for the machine.
EXTRA_PARTS = 

# List of extra object files that should be compiled and linked with
# compiler proper (cc1, cc1obj, cc1plus).
EXTRA_OBJS = 

# List of extra object files that should be compiled and linked with
# the gcc driver.
EXTRA_GCC_OBJS =

# List of additional header files to install.
# Often this is edited directly by `configure'.
EXTRA_HEADERS =

# Set this to `ld' to enable use of collect2.
# USE_COLLECT2 = 
MAYBE_USE_COLLECT2 = 
# It is convenient for configure to add the assignment at the beginning,
# so don't override it here.

# List of extra C and assembler files to add to libgcc1.a.
# Assembler files should have names ending in `.asm'.
LIB1FUNCS_EXTRA = 

# List of extra C and assembler files to add to libgcc2.a.
# Assembler files should have names ending in `.asm'.
LIB2FUNCS_EXTRA = 

# Default float.h source to use for cross-compiler.
# This is overridden by configure.
CROSS_FLOAT_H=$(srcdir)/config/float-@float_format@.h

# Program to convert libraries.
LIBCONVERT = 

# Control whether header files are installed.
INSTALL_HEADERS=install-headers

# Options for tar when copying trees.  So HPUX can override it.
TAROUTOPTS = xpBf

# Select which version of fixincludes to use (I.E. regular versus SVR4)
# This value is overridden directly by configure.
FIXINCLUDES = 

# Additional directories of header files to run fixincludes on.
# These should be directories searched automatically by default
# just as /usr/include is.
# *Do not* use this for directories that happen to contain 
# header files, but are not searched automatically by default.
# On most systems, this is empty.
OTHER_FIXINCLUDES_DIRS=

# A list of all the language-specific executables.
# This is overridden by configure.
COMPILERS = cc1$(exeext) cc1plus$(exeext)

# List of things which should already be built whenever we try to use xgcc.exe
# to compile anything (without linking).
GCC_PASSES=xgcc.exe cc1.exe cpp.exe $(EXTRA_PASSES)

# List of things which should already be built whenever we try to use xgcc.exe
# to link anything.
GCC_PARTS=$(GCC_PASSES) $(LIBGCC) $(EXTRA_PROGRAMS) $(USE_COLLECT2) $(EXTRA_PARTS)

# Directory to link to, when using the target `maketest'.
DIR = ../gcc

# Guaranteed to not exist when not passing md through cpp.
# This value is overridden directly by configure.
MD_FILE = md-cpp-not-used

# Flags to use when cross-building GCC.
# Prefix to apply to names of object files when using them
# to run on the machine we are compiling on.
HOST_PREFIX=
# Prefix to apply to names of object files when compiling them
# to run on the machine we are compiling on.
# The default for this variable is chosen to keep these rules 
# out of the way of the other rules for compiling the same source files.
HOST_PREFIX_1=loser-
HOST_CC=$(CC)
HOST_CFLAGS=$(ALL_CFLAGS)
HOST_CLIB=$(CLIB)
HOST_LDFLAGS=$(LDFLAGS)
HOST_CPPFLAGS=$(ALL_CPPFLAGS)
HOST_ALLOCA=$(ALLOCA)
HOST_MALLOC=$(MALLOC)
HOST_OBSTACK=$(OBSTACK)

# Actual name to use when installing a native compiler.
GCC_INSTALL_NAME = `t='$(program_transform_name)'; echo gcc | sed $$t`

# Actual name to use when installing a cross-compiler.
GCC_CROSS_NAME = `t='$(program_transform_cross_name)'; echo gcc | sed $$t`

# Choose the real default target.
ALL=all.internal

# Choose the real install target.
INSTALL_TARGET=install-normal

# Source for float.h.  Overridden by cross-make.
FLOAT_H=float.h-nat

# Extra symbols for fixproto to define when parsing headers.
FIXPROTO_DEFINES = 

# Extra flags to use when compiling crt{begin,end}.o.
CRTSTUFF_T_CFLAGS = 

# Extra flags to use when compiling [m]crt0.o.
CRT0STUFF_T_CFLAGS = 

# "t" or nothing, for building multilibbed versions of, say, crtbegin.o.
T =

# End of variables for you to override.

# Definition of `all' is here so that new rules inserted by sed
# do not specify the default target.
# The real definition is under `all.internal' (for native compilers)
# or `all.cross' (for cross compilers).
all: all.indirect

# This tells GNU Make version 3 not to put all variables in the environment.
.NOEXPORT:

# sed inserts variable overrides after the following line.
CC = cl 
CLIB = libc.lib kernel32.lib advapi32.lib
# Use this one for release builds
CFLAGS = -Di386 -DWIN32 -D_WIN32 -D_M_IX86=300 -D_X86_=1   -DALMOST_STDC -D_MSC_VER=800 -D__MSDOS__ -Fo$@ -D__STDC__ -Ox -DSNPSX
LDFLAGS = -align:0x1000 -subsystem:console -entry:mainCRTStartup   -stack:1000000,1000 
# Use this one for debug builds
# CFLAGS = -Di386 -DWIN32 -D_WIN32 -D_M_IX86=300 -D_X86_=1   -DALMOST_STDC -D_MSC_VER=800 -D__MSDOS__ -Fo$@ -D__STDC__ -Z7 -DSNPSX
# LDFLAGS = -align:0x1000 -subsystem:console -entry:mainCRTStartup   -stack:1000000,1000 -DEBUG

EXTRA_OBJS=winnt.o 
winnt.o: $(srcdir)/config/i386/winnt.c 
	$(CC) $(CFLAGS)   	-I. -I$(srcdir) -I$(srcdir)/config -c $(srcdir)/config/i386/winnt.c 

STMP_FIXPROTO = 
OTHER_FIXINCLUDES_DIRS=. 
RANLIB = : 
RANLIB_TEST = false 
OLDCC = cl 
MAKE = nmake 
SYMLINK = copy 
INSTALL = $(srcdir)/install.sh -c 
exeext = .exe 
objext = .o 
oldobjext = .o 

EXTRA_PROGRAMS=ld.exe 

ld.o: $(srcdir)/config/winnt/ld.c 
	$(CC) $(CFLAGS)   	-I. -I$(srcdir) -I$(srcdir)/config -c $(srcdir)/config/winnt/ld.c 

ld.exe: ld.o 
	link -out:ld.exe ld.o $(LDFLAGS) $(CLIB) 

EXTRA_GCC_OBJS=oldnames.o 
spawnv.o: $(srcdir)/config/winnt/spawnv.c 
	$(CC) $(CFLAGS)   	-I. -I$(srcdir) -I$(srcdir)/config -c $(srcdir)/config/winnt/spawnv.c 

oldnames.o: $(srcdir)/config/winnt/oldnames.c 
	$(CC) $(CFLAGS)   	-I. -I$(srcdir) -I$(srcdir)/config -c $(srcdir)/config/winnt/oldnames.c

# Now figure out from those variables how to compile and link.

all.indirect: $(ALL)

# IN_GCC tells obstack.h that we are using gcc's <stddef.h> file.
# ??? IN_GCC should be obsolete now.
INTERNAL_CFLAGS = $(CROSS) -DIN_GCC

# This is the variable actually used when we compile.
ALL_CFLAGS = $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) $(XCFLAGS) 

# Likewise.
ALL_CPPFLAGS = $(CPPFLAGS) $(X_CPPFLAGS) $(T_CPPFLAGS)

# Even if ALLOCA is set, don't use it if compiling with GCC.
USE_ALLOCA=alloca.o
# USE_ALLOCA= ` case "${CC}" in "${OLDCC}") echo "${ALLOCA}" ;; esac `
USE_HOST_ALLOCA=alloca.o
# USE_HOST_ALLOCA= ` case "$(HOST_CC)"@"${HOST_ALLOCA}" in "${OLDCC}"@?*) echo ${HOST_PREFIX}${HOST_ALLOCA} ;; esac `
# USE_HOST_MALLOC= ` case "${HOST_MALLOC}" in ?*) echo ${HOST_PREFIX}${HOST_MALLOC} ;; esac `
USE_HOST_OBSTACK=obstack.o
# USE_HOST_OBSTACK= ` case "${HOST_OBSTACK}" in ?*) echo ${HOST_PREFIX}${HOST_OBSTACK} ;; esac `

# Dependency on obstack, alloca, malloc or whatever library facilities
# are not installed in the system libraries.
# We don't use USE_ALLOCA because backquote expansion doesn't work in deps.
LIBDEPS= $(OBSTACK) $(ALLOCA) $(MALLOC)

# Likewise, for use in the tools that must run on this machine
# even if we are cross-building GCC.
# We don't use USE_ALLOCA because backquote expansion doesn't work in deps.
HOST_LIBDEPS= $(HOST_PREFIX)$(HOST_OBSTACK) $(HOST_PREFIX)$(HOST_ALLOCA) $(HOST_PREFIX)$(HOST_MALLOC)

# How to link with both our special library facilities
# and the system's installed libraries.
LIBS = $(OBSTACK) $(USE_ALLOCA) $(MALLOC) $(CLIB)

# Likewise, for use in the tools that must run on this machine
# even if we are cross-building GCC.
HOST_LIBS = $(USE_HOST_OBSTACK) $(USE_HOST_ALLOCA) $(USE_HOST_MALLOC)   	    $(HOST_CLIB)

HOST_RTL = $(HOST_PREFIX)rtl.o
HOST_RTLANAL = $(HOST_PREFIX)rtlanal.o
HOST_PRINT = $(HOST_PREFIX)print-rtl.o

# Specify the directories to be searched for header files.
# Both . and srcdir are used, in that order,
# so that tm.h and config.h will be found in the compilation
# subdirectory rather than in the source directory.
INCLUDES = -I. -I$(srcdir) -I$(srcdir)/config

# Always use -I$(srcdir)/config when compiling.
.c.o :
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<

# This tells GNU make version 3 not to export all the variables
# defined in this file into the environment.
.NOEXPORT:
#

# Support for additional languages (other than c and objc).
# ??? objc can be supported this way too (leave for later).

# These next lines are overridden by configure.
LANG_MAKEFILES = @all_lang_makefiles@
LANG_STAGESTUFF = @all_stagestuff@
LANG_DIFF_EXCLUDES = @all_diff_excludes@
LANG_LIB2FUNCS = @all_lib2funcs@
LANG_EXTRA_HEADERS = @all_headers@

# Flags to pass to recursive makes.
# CC is set by configure.  Hosts without symlinks need special handling
# because we need CC="stage1/xgcc.exe -Bstage1/" to work in the language
# subdirectories.
# ??? The choices here will need some experimenting with.
FLAGS_TO_PASS =  	"AR_FLAGS=$(AR_FLAGS)"  	"AR_FOR_TARGET=$(AR_FOR_TARGET)"  	"BISON=$(BISON)"  	"BISONFLAGS=$(BISONFLAGS)"  	"CC=@cc_set_by_configure@"  	"CFLAGS=$(CFLAGS)"  	"CLIB=$(CLIB)"  	"GCC_FOR_TARGET=$(GCC_FOR_TARGET)"  	"LDFLAGS=$(LDFLAGS)"  	"LEX=$(LEX)"  	"LEXFLAGS=$(LEXFLAGS)"  	"LN=$(LN)"  	"MAKEINFO=$(MAKEINFO)"  	"MAKEINFOFLAGS=$(MAKEINFOFLAGS)"  	"RANLIB_FOR_TARGET=$(RANLIB_FOR_TARGET)"  	"RANLIB_TEST_FOR_TARGET=$(RANLIB_TEST_FOR_TARGET)"  	"SHELL=$(SHELL)"  	"STAGE_PREFIX=@stage_prefix_set_by_configure@"  	"exeext=$(exeext)"  	"objext=$(objext)"  	"exec_prefix=$(exec_prefix)"  	"prefix=$(prefix)"  	"tooldir=$(tooldir)"  	"bindir=$(bindir)"  	"libsubdir=$(libsubdir)"
#

# Lists of files for various purposes.

# Language-specific object files for C and Objective C.
C_AND_OBJC_OBJS = c-lex.o c-pragma.o c-decl.o c-typeck.o c-convert.o    c-aux-info.o c-common.o c-iterate.o

# Language-specific object files for C.
C_OBJS = c-parse.o c-lang.o $(C_AND_OBJC_OBJS)

# Files specific to the C interpreter bytecode compiler(s).
BC_OBJS = bc-emit.o bc-optab.o

# Bytecode header files constructed at build time; vmsconfig.com wants this.
BC_ALL = bc-arity.h bc-opcode.h bc-opname.h

# Language-independent object files.
OBJS = toplev.o version.o tree.o print-tree.o stor-layout.o fold-const.o   function.o stmt.o except.o expr.o calls.o expmed.o explow.o optabs.o   varasm.o rtl.o print-rtl.o rtlanal.o emit-rtl.o real.o   dbxout.o sdbout.o dwarfout.o dwarf2out.o xcoffout.o bitmap.o   integrate.o jump.o cse.o loop.o unroll.o flow.o stupid.o combine.o   regclass.o local-alloc.o global.o reload.o reload1.o caller-save.o   insn-peep.o reorg.o sched.o final.o recog.o reg-stack.o   insn-opinit.o insn-recog.o insn-extract.o insn-output.o insn-emit.o   profile.o insn-attrtab.o $(out_object_file) getpwd.o convert.o $(EXTRA_OBJS)

# GEN files are listed separately, so they can be built before doing parallel
#  makes for cc1.exe or cc1plus.  Otherwise sequent parallel make attempts to load
#  them before rtl.o is compiled.
GEN= genemit.exe genoutput genrecog.exe genextract genflags.exe gencodes genconfig.exe genpeep.exe

CCCP=cccp
# Uncomment this line if you want to use cppmain (w/cpplib) as cpp.
#CCCP=cppmain

# Files to be copied away after each stage in building.
STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h   insn-output.c insn-recog.c insn-emit.c insn-extract.c insn-peep.c   insn-attr.h insn-attrtab.c insn-opinit.c   stamp-flags stamp-config stamp-codes stamp-mlib   stamp-output stamp-recog stamp-emit stamp-extract stamp-peep   stamp-attr stamp-attrtab stamp-opinit stamp-proto stamp-crt stamp-crtS stamp-crt0   genemit$(exeext) genoutput$(exeext) genrecog$(exeext) genextract$(exeext)   genflags$(exeext) gencodes$(exeext) genconfig$(exeext) genpeep$(exeext)   genattrtab$(exeext) genattr$(exeext) genopinit$(exeext)   $(BC_ALL)   stamp-bcarity stamp-bcopcode stamp-bcopname   bi-arity$(exeext) bi-opcode$(exeext) bi-opname$(exeext)   xgcc$(exeext) cc1$(exeext) cpp$(exeext) $(EXTRA_PASSES)   $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext)   $(CCCP)$(exeext) cc1obj$(exeext) enquire$(exeext)   protoize$(exeext) unprotoize$(exeext)   specs collect2$(exeext) $(USE_COLLECT2) underscore.c   gcov$(exeext) *.bp   *.greg *.lreg *.combine *.flow *.cse *.jump *.rtl *.tree *.loop   *.dbr *.jump2 *.sched *.cse2 *.sched2 *.stack   *.[si]   $(LANG_STAGESTUFF)

# Members of libgcc1.a.
LIB1FUNCS = _mulsi3 _udivsi3 _divsi3 _umodsi3 _modsi3     _lshrsi3 _ashrsi3 _ashlsi3     _divdf3 _muldf3 _negdf2 _adddf3 _subdf3     _fixdfsi _fixsfsi _floatsidf _floatsisf _truncdfsf2 _extendsfdf2     _addsf3 _negsf2 _subsf3 _mulsf3 _divsf3     _eqdf2 _nedf2 _gtdf2 _gedf2 _ltdf2 _ledf2     _eqsf2 _nesf2 _gtsf2 _gesf2 _ltsf2 _lesf2

# Library members defined in libgcc2.c.
LIB2FUNCS = _muldi3 _divdi3 _moddi3 _udivdi3 _umoddi3 _negdi2       _lshrdi3 _ashldi3 _ashrdi3 _ffsdi2      _udiv_w_sdiv _udivmoddi4 _cmpdi2 _ucmpdi2 _floatdidf _floatdisf      _fixunsdfsi _fixunssfsi _fixunsdfdi _fixdfdi _fixunssfdi _fixsfdi      _fixxfdi _fixunsxfdi _floatdixf _fixunsxfsi      _fixtfdi _fixunstfdi _floatditf      __gcc_bcmp _varargs __dummy _eprintf _op_new _op_vnew _new_handler      _op_delete _op_vdel _bb _shtab _clear_cache _trampoline __main _exit      _ctors _eh _eh_compat _pure

# The files that "belong" in CONFIG_H are deliberately omitted
# because having them there would not be useful in actual practice.
# All they would do is cause complete recompilation every time
# one of the machine description files is edited.
# That may or may not be what one wants to do.
# If it is, rm *.o is an easy way to do it.
# CONFIG_H = $(host_xm_file) $(tm_file)
CONFIG_H =
RTL_H = rtl.h rtl.def gansidecl.h machmode.h machmode.def
TREE_H = tree.h real.h tree.def gansidecl.h machmode.h machmode.def
BYTECODE_H = bytecode.h bc-emit.h bc-optab.h
BASIC_BLOCK_H = basic-block.h bitmap.h
DEMANGLE_H = demangle.h gansidecl.h
RECOG_H = recog.h gansidecl.h
#

# Language makefile fragments.

# The following targets define the interface between us and the languages.
#
# all.build, all.cross, start.encap, rest.encap,
# info, dvi,
# install-normal, install-common, install-info, install-man,
# uninstall, distdir,
# mostlyclean, clean, distclean, extraclean, maintainer-clean,
# stage1, stage2, stage3, stage4
#
# Each language is linked in with a series of hooks (since we can't use `::'
# targets).  The name of each hooked is "lang.${target_name}" (eg: lang.info).
# Configure computes and adds these here.

# Avoid a lot of time thinking about remaking Makefile.in and *.def.
.SUFFIXES: .in .def


$(srcdir)/configure: $(srcdir)/configure.in
	 autoconf

# cstamp-h.in controls rebuilding of config.in.
# It is named cstamp-h.in and not stamp-h.in so the mostlyclean rule doesn't
# delete it.  A stamp file is needed as autoheader won't update the file if
# nothing has changed.
# It remains in the source directory and is part of the distribution.
# This follows what is done in shellutils, fileutils, etc.
# "echo timestamp" is used instead of echo > to be consistent with other
# packages that use autoconf (??? perhaps also to avoid problems with patch?).
# ??? Newer versions have a maintainer mode that may be useful here.
$(srcdir)/config.in: $(srcdir)/cstamp-h.in
$(srcdir)/cstamp-h.in: $(srcdir)/configure.in $(srcdir)/acconfig.h
	cd $(srcdir) && autoheader
	echo timestamp > $(srcdir)/cstamp-h.in
auto-config.h: cstamp-h 
cstamp-h: config.in 
	CONFIG_HEADERS=auto-config.h:config.in $(SHELL) 

# Really, really stupid make features, such as SUN's KEEP_STATE, may force
# a target to build even if it is up-to-date.  So we must verify that
#  does not exist before failing.

all.internal: start.encap rest.encap
# This is what to compile if making a cross-compiler.
# Note that we can compile enquire.exe using the cross-compiler just built,
# although we can't run it on this machine.
all.cross: native gcc-cross specs stmp-headers $(LIBGCC) $(STMP_FIXPROTO)  	$(LIBGCC1_TEST) $(EXTRA_PARTS) lang.all.cross
# This is what to compile if making gcc with a cross-compiler.
all.build: native xgcc.exe $(EXTRA_PARTS) lang.all.build
# This is what must be made before installing GCC and converting libraries.
start.encap: native xgcc.exe specs $(LIBGCC1) xlimits.h lang.start.encap
# These can't be made until after GCC can run.
rest.encap: stmp-headers $(LIBGCC) $(STMP_FIXPROTO) $(EXTRA_PARTS) lang.rest.encap
# This is what is made with the host's compiler
# whether making a cross compiler or not.
native:  auto-config.h cpp.exe $(LANGUAGES)  	$(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2)

# Define the names for selecting languages in LANGUAGES.
Cc: cc1.exe
PROTO: proto

# Tell GNU make these are phony targets.
.PHONY: C c PROTO proto

# On the target machine, finish building a cross compiler.
# This does the things that can't be done on the host machine.
rest.cross: $(LIBGCC) gfloat.h specs

# Verify that it works to compile and link libgcc1-test.
# If it does, then there are sufficient replacements for libgcc1.a.
libgcc1-test: libgcc1-test.o native $(GCC_PARTS)
	@echo "Testing libgcc1.  Ignore linker warning messages."
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) libgcc1-test.o -o libgcc1-test  	  -nostartfiles -nostdlib `$(GCC_FOR_TARGET) --print-libgcc-file-name`
libgcc1-test.o : libgcc1-test.c native xgcc.exe
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) -c $(srcdir)/libgcc1-test.c

# Recompile all the language-independent object files.
# This is used only if the user explicitly asks for it.
compilations: $(OBJS)

# Create a list of the language-independent object files so the language
# subdirectories needn't mention their names explicitly.
stamp-objlist: $(OBJS) $(BC_OBJS)
	echo.exe  $(OBJS) $(BC_OBJS) | sed -e "s, ([a-z]), ../1,g" >stamp-objlist

# We call this executable `xgcc' rather than `gcc'
# to avoid confusion if the current directory is in the path
# and CC is `gcc'.  It is renamed to `gcc' when it is installed.
xgcc.exe : gcc.o version.o choose-temp.o pexecute.o prefix.o version.o     $(LIBDEPS) $(EXTRA_GCC_OBJS)
	link $(LDFLAGS) -out:$@ gcc.o prefix.o version.o  	  choose-temp.o pexecute.o $(EXTRA_GCC_OBJS) $(LIBS)

# Dump a specs file to make -B./ read these specs over installed ones.
specs: xgcc.exe
	$(GCC_FOR_TARGET) -dumpspecs > tmp-specs
	mv tmp-specs specs

# We do want to create an executable named `xgcc', so we can use it to
# compile libgcc2.a.
# Also create gcc-cross, so that install-common will install properly.
gcc-cross: xgcc.exe
	cp xgcc$(exeext) gcc-cross$(exeext)

cc1.exe : $(P) $(C_OBJS) $(OBJS) $(BC_OBJS) $(LIBDEPS)
        link $(LDFLAGS) -out:$@ $(C_OBJS) @sn.rsp $(out_object_file) $(EXTRA_OBJS) $(BC_OBJS) $(LIBS)

# Copy float.h from its source.
gfloat.h: $(FLOAT_H)
	-del gfloat.h
	cp $(FLOAT_H) gfloat.h

# Create float.h source for the native machine.
# Make it empty if we can use the system float.h without changes.
float.h-nat: enquire.exe
	-./enquire.exe -f > tmp-float.h
	grep '#define [^_]' tmp-float.h >NUL || true > tmp-float.h
	mv tmp-float.h float.h-nat

# Create a dummy float.h source for a cross-compiler.
# ??? This isn't used anymore.  Should we create config/float-unkn.h
# and make that the default float_format in configure?
float.h-cross:
	echo "#ifndef	__GCC_FLOAT_NOT_NEEDED" > t-float.h-cross
	echo "#error float.h values not known for cross-compiler" >> t-float.h-cross
	echo "#endif" >> t-float.h-cross
	mv t-float.h-cross float.h-cross

# Used to compile enquire.exe with standard cc, but have forgotten why.
# Let's try with GCC.
enquire.exe : enquire.o 
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ENQUIRE_LDFLAGS) enquire.o -o $@
enquire.o : $(srcdir)/enquire.c  stmp-int-hdrs
	del include/float.h
	if $(FLOAT_H_TEST); then  	  SYS_FLOAT_H_WRAP=1;  	else :;  	  SYS_FLOAT_H_WRAP=0;  	fi;  	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(ENQUIRE_CFLAGS)  	  -DSYS_FLOAT_H_WRAP=$$SYS_FLOAT_H_WRAP  	  -I. -c $(srcdir)/enquire.c

# Build the version of limits.h that we will install.
xlimits.h: glimits.h limitx.h limity.h
	if $(LIMITS_H_TEST) ; then  	  cat $(srcdir)/limitx.h $(srcdir)/glimits.h $(srcdir)/limity.h > tmp-xlimits.h;  	else  	  cat $(srcdir)/glimits.h > tmp-xlimits.h;  	fi
	mv tmp-xlimits.h xlimits.h
#

# Build libgcc.a

libgcc.lib : libgcc1.c libgcc2.c mklibgcc.exe
	mklibgcc -c
	mklibgcc "cl -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)" libgcc1.c $(LIB1FUNCS)
	mklibgcc "xgcc -B./ -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)" libgcc2.c $(LIB2FUNCS)
	mklibnow.bat
	-del libgcc.lib
	lib -verbose -out:libgcc.lib lgcctmp/*.o

mklibgcc.o : $(srcdir)/config/winnt/mklibgcc.c
	cl -I. -I$(srcdir) -I$(srcdir)/config/winnt -c $(srcdir)/config/winnt/mklibgcc.c

dirent.o : $(srcdir)/config/winnt/dirent.c stmp-int-hdrs
	cl -I. -I$(srcdir) -I$(srcdir)/include -I$(srcdir)/config/winnt -c $(srcdir)/config/winnt/dirent.c

mklibgcc.exe : mklibgcc.o dirent.o
	cl mklibgcc.o dirent.o libc.lib kernel32.lib

# Compiling object files from source files.

# Note that dependencies on obstack.h are not written
# because that file is not part of GCC.

# C language specific files.

c-parse.o : c-parse.c $(CONFIG_H) $(TREE_H) c-lex.h      c-parse.h c-tree.h input.h flags.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c c-parse.c
c-parse.h: c-parse.c
c-parse.c: c-parse.y
	 $(BISON) $(BISONFLAGS) -d c-parse.y -o c-parse.c
c-parse.y: c-parse.in
	echo '/*WARNING: This file is automatically generated!*/' >tmp-c-parse.y
	sed -e "/^ifobjc$$/,/^end ifobjc$$/d"  	  -e "/^ifc$$/d" -e "/^end ifc$$/d"  	  c-parse.in >>tmp-c-parse.y
	copy tmp-c-parse.y c-parse.y

c-gperf.h: c-parse.gperf
	gperf -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$$  	   c-parse.gperf >tmp-gperf.h
	 copy tmp-gperf.h c-gperf.h

c-decl.o : c-decl.c $(CONFIG_H) $(TREE_H) c-tree.h c-lex.h flags.h output.h
c-typeck.o : c-typeck.c $(CONFIG_H) $(TREE_H) c-tree.h flags.h output.h
c-lang.o : c-lang.c $(CONFIG_H) $(TREE_H)
c-lex.o : c-lex.c $(CONFIG_H) $(TREE_H) c-lex.h c-tree.h c-parse.h      input.h flags.h c-gperf.h c-pragma.h
c-aux-info.o : c-aux-info.c  $(CONFIG_H) $(TREE_H) c-tree.h flags.h
c-convert.o : c-convert.c $(CONFIG_H) $(TREE_H) flags.h
c-pragma.o : c-pragma.c $(CONFIG_H) $(TREE_H) except.h function.h      defaults.h c-pragma.h
c-iterate.o : c-iterate.c $(CONFIG_H) $(TREE_H) $(RTL_H) c-tree.h flags.h

# To make a configuration always use collect2, set USE_COLLECT2 to ld.
ld: collect2
	del ld$(exeext)
	ln collect2$(exeext) ld$(exeext) > NUL 2>&1  	   || copy collect2$(exeext) ld$(exeext)

collect2 : collect2.o cplus-dem.o underscore.o version.o  	choose-temp.o $(LIBDEPS)
# Don't try modifying collect2 (aka ld) in place--it might be linking this.
	-del collect2$(exeext)
	link $(LDFLAGS) -out:$@ collect2.o  	  cplus-dem.o underscore.o version.o choose-temp.o $(LIBS)

collect2.o : collect2.c $(CONFIG_H) gansidecl.h gstab.h obstack.h $(DEMANGLE_H)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)   	-DTARGET_MACHINE=\"$(target_alias)\" $(MAYBE_USE_COLLECT2)  	-c collect2.c

cplus-dem.o : cplus-dem.c $(DEMANGLE_H)

underscore.c: stamp-under 

stamp-under: $(GCC_PASSES)
	echo "int xxy_us_dummy;" >tmp-dum.c
	$(GCC_FOR_TARGET) -S tmp-dum.c
	echo '/*WARNING: This file is automatically generated!*/' >tmp-under.c
	if grep _xxy_us_dummy tmp-dum.s > NUL ; then  	  echo "int prepends_underscore = 1;" >>tmp-under.c;  	else  	  echo "int prepends_underscore = 0;" >>tmp-under.c;  	fi
	copy tmp-under.c underscore.c
	-del tmp-dum.c tmp-dum.s
        echo > stamp-under

# A file used by all variants of C.

c-common.o : c-common.c $(CONFIG_H) $(TREE_H) c-tree.h c-lex.h flags.h

# Language-independent files.

DRIVER_DEFINES =    -DSTANDARD_STARTFILE_PREFIX=\"$(libdir)/\"    -DSTANDARD_EXEC_PREFIX=\"$(libdir)/gcc-lib/\"    -DDEFAULT_TARGET_VERSION=\"$(version)\"    -DDEFAULT_TARGET_MACHINE=\"$(target_alias)\"    -DTOOLDIR_BASE_PREFIX=\"$(exec_prefix)/\"
gcc.o : gcc.c $(CONFIG_H) gansidecl.h multilib.h Makefile $(lang_specs_files)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)    $(DRIVER_DEFINES)    -c gcc.c

dumpvers: dumpvers.c

version.o : version.c
obstack.o : obstack.c $(CONFIG_H)
choose-temp.o : choose-temp.c $(CONFIG_H) gansidecl.h
pexecute.o : pexecute.c $(CONFIG_H) gansidecl.h
prefix.o : prefix.c $(CONFIG_H) gansidecl.h Makefile
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)  	-DPREFIX=\"$(prefix)\"  	  -c prefix.c

convert.o : convert.c $(CONFIG_H) $(TREE_H) flags.h convert.h

tree.o : tree.c $(CONFIG_H) $(TREE_H) flags.h function.h
print-tree.o : print-tree.c $(CONFIG_H) $(TREE_H)
stor-layout.o : stor-layout.c $(CONFIG_H) $(TREE_H) flags.h function.h
fold-const.o : fold-const.c $(CONFIG_H) $(TREE_H) flags.h 
toplev.o : toplev.c $(CONFIG_H) $(TREE_H) $(RTL_H) bytecode.h bc-emit.h     flags.h input.h insn-attr.h xcoffout.h defaults.h output.h     $(lang_options_files)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(MAYBE_USE_COLLECT2)  	  -DTARGET_NAME=\"$(target_alias)\"  	  -c toplev.c

rtl.o : rtl.c $(CONFIG_H) $(RTL_H)

print-rtl.o : print-rtl.c $(CONFIG_H) $(RTL_H)
rtlanal.o : rtlanal.c $(CONFIG_H) $(RTL_H)

varasm.o : varasm.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h function.h     defaults.h insn-codes.h expr.h hard-reg-set.h regs.h xcoffout.h     output.h bytecode.h c-pragma.h
function.o : function.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h      insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h insn-config.h     $(RECOG_H) output.h bytecode.h bc-emit.h
stmt.o : stmt.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h      insn-flags.h insn-config.h insn-codes.h hard-reg-set.h expr.h except.h     loop.h $(RECOG_H) bytecode.h bc-typecd.h bc-typecd.def bc-opcode.h     bc-optab.h bc-emit.h
except.o : except.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h      insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h insn-config.h     $(RECOG_H) output.h except.h
expr.o : expr.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h regs.h     insn-flags.h insn-codes.h expr.h insn-config.h $(RECOG_H) output.h     typeclass.h bytecode.h bc-opcode.h bc-typecd.h bc-typecd.def bc-optab.h     bc-emit.h modemap.def hard-reg-set.h
calls.o : calls.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h expr.h insn-codes.h     insn-flags.h regs.h
expmed.o : expmed.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h      insn-flags.h insn-config.h insn-codes.h expr.h $(RECOG_H) real.h
explow.o : explow.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h hard-reg-set.h     insn-config.h expr.h $(RECOG_H) insn-flags.h insn-codes.h
optabs.o : optabs.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h      insn-flags.h insn-config.h insn-codes.h expr.h $(RECOG_H) reload.h
dbxout.o : dbxout.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h regs.h     insn-config.h reload.h gstab.h xcoffout.h defaults.h output.h
sdbout.o : sdbout.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h except.h     function.h expr.h output.h hard-reg-set.h regs.h defaults.h real.h     insn-config.h bytecode.h obstack.h xcoffout.h c-pragma.h
dwarfout.o : dwarfout.c $(CONFIG_H) $(TREE_H) $(RTL_H) dwarf.h flags.h     insn-config.h reload.h output.h defaults.h
dwarf2out.o : dwarf2out.c $(CONFIG_H) $(TREE_H) $(RTL_H) dwarf2.h flags.h     insn-config.h reload.h output.h defaults.h hard-reg-set.h regs.h expr.h
xcoffout.o : xcoffout.c $(CONFIG_H) $(TREE_H) $(RTL_H) xcoffout.h flags.h
emit-rtl.o : emit-rtl.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h except.h     function.h regs.h insn-config.h $(RECOG_H) real.h expr.h obstack.h     bytecode.h bc-opcode.h bc-typecd.h bc-typecd.def bc-optab.h bc-emit.h     bc-opname.h
real.o : real.c $(CONFIG_H) $(TREE_H)
getpwd.o : getpwd.c $(CONFIG_H)

integrate.o : integrate.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h integrate.h     insn-flags.h insn-config.h insn-codes.h expr.h real.h regs.h function.h     bytecode.h output.h $(RECOG_H) except.h

jump.o : jump.c $(CONFIG_H) $(RTL_H) flags.h hard-reg-set.h regs.h     insn-config.h insn-flags.h $(RECOG_H) expr.h real.h except.h
stupid.o : stupid.c $(CONFIG_H) $(RTL_H) regs.h hard-reg-set.h flags.h

cse.o : cse.c $(CONFIG_H) $(RTL_H) regs.h hard-reg-set.h flags.h real.h     insn-config.h $(RECOG_H) expr.h
profile.o : profile.c $(CONFIG_H) $(RTL_H) flags.h insn-flags.h gcov-io.h     $(TREE_H) output.h regs.h
loop.o : loop.c $(CONFIG_H) $(RTL_H) flags.h loop.h insn-config.h     insn-flags.h insn-codes.h regs.h hard-reg-set.h $(RECOG_H) expr.h real.h
unroll.o : unroll.c $(CONFIG_H) $(RTL_H) insn-config.h integrate.h regs.h     $(RECOG_H) flags.h expr.h loop.h
flow.o : flow.c $(CONFIG_H) $(RTL_H) flags.h insn-config.h     $(BASIC_BLOCK_H) regs.h hard-reg-set.h output.h
combine.o : combine.c $(CONFIG_H) $(RTL_H) flags.h      insn-config.h insn-flags.h insn-codes.h insn-attr.h regs.h expr.h     $(BASIC_BLOCK_H) $(RECOG_H) real.h hard-reg-set.h
regclass.o : regclass.c $(CONFIG_H) $(RTL_H) hard-reg-set.h flags.h     $(BASIC_BLOCK_H) regs.h insn-config.h $(RECOG_H) reload.h real.h bytecode.h
local-alloc.o : local-alloc.c $(CONFIG_H) $(RTL_H) flags.h $(BASIC_BLOCK_H)     regs.h hard-reg-set.h insn-config.h $(RECOG_H) output.h
bitmap.o : bitmap.c $(CONFIG_H) $(RTL_H) flags.h $(BASIC_BLOCK_H) regs.h
global.o : global.c $(CONFIG_H) $(RTL_H) flags.h      $(BASIC_BLOCK_H) regs.h hard-reg-set.h insn-config.h output.h

reload.o : reload.c $(CONFIG_H) $(RTL_H) flags.h output.h expr.h    reload.h $(RECOG_H) hard-reg-set.h insn-config.h insn-codes.h regs.h real.h
reload1.o : reload1.c $(CONFIG_H) $(RTL_H) real.h flags.h expr.h     reload.h regs.h hard-reg-set.h insn-config.h insn-flags.h insn-codes.h     $(BASIC_BLOCK_H) $(RECOG_H) output.h
caller-save.o : caller-save.c $(CONFIG_H) $(RTL_H) flags.h     regs.h hard-reg-set.h insn-codes.h insn-config.h $(BASIC_BLOCK_H) $(RECOG_H)     reload.h expr.h
reorg.o : reorg.c $(CONFIG_H) $(RTL_H) conditions.h hard-reg-set.h     $(BASIC_BLOCK_H) regs.h insn-config.h insn-attr.h insn-flags.h $(RECOG_H)     flags.h output.h
sched.o : $(SCHED_PREFIX)sched.c $(CONFIG_H) $(RTL_H) $(BASIC_BLOCK_H) regs.h hard-reg-set.h     flags.h insn-config.h insn-attr.h
final.o : final.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h regs.h     $(RECOG_H) conditions.h insn-config.h insn-attr.h except.h real.h output.h     hard-reg-set.h insn-flags.h insn-codes.h gstab.h xcoffout.h defaults.h
recog.o : recog.c $(CONFIG_H) $(RTL_H)      regs.h $(RECOG_H) hard-reg-set.h flags.h insn-config.h insn-attr.h     insn-flags.h insn-codes.h real.h
reg-stack.o : reg-stack.c $(CONFIG_H) $(RTL_H) $(TREE_H)     regs.h hard-reg-set.h flags.h insn-config.h insn-flags.h

$(out_object_file): $(out_file) $(CONFIG_H) $(TREE_H)     $(RTL_H) regs.h hard-reg-set.h real.h insn-config.h conditions.h     insn-flags.h output.h insn-attr.h insn-codes.h
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(out_file)

# Build auxiliary files that support ecoff format.
mips-tfile: mips-tfile.o version.o $(LIBDEPS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ mips-tfile.o version.o $(LIBS)

mips-tfile.o : mips-tfile.c $(CONFIG_H) $(RTL_H)

mips-tdump: mips-tdump.o version.o $(LIBDEPS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ mips-tdump.o version.o $(LIBS)

mips-tdump.o : mips-tdump.c $(CONFIG_H) $(RTL_H)

# Build file to support OSF/rose half-pic format.
halfpic.o : halfpic.c $(CONFIG_H) $(RTL_H) $(TREE_H)

# Normally this target is not used; but it is used if you
# define ALLOCA=alloca.o.  In that case, you must get a suitable alloca.c
# from the GNU Emacs distribution.
alloca.o :	alloca.c
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(ALLOCA_FLAGS)  	  -c alloca.c
	$(ALLOCA_FINISH)
#

# Generate header and source files from the machine description, 
# and compile them.

.PRECIOUS: insn-config.h insn-flags.h insn-codes.h    insn-emit.c insn-recog.c insn-extract.c insn-output.c insn-peep.c    insn-attr.h insn-attrtab.c

# The following pair of rules has this effect:
# genconfig.exe is run only if the md has changed since genconfig.exe was last run;
# but the file insn-config.h is echo >ed only when its contents actually change.

# Each of the other insn-* files is handled by a similar pair of rules.

# This causes an anomaly in the results of make -n
# because insn-* is older than stamp-*
# and thus make -n thinks that insn-* will be updated
# and force recompilation of things that depend on it.
# We use move-if-change precisely to avoid such recompilation.
# But there is no way to teach make -n that it will be avoided.

# Each of the insn-*.[ch] rules has a semicolon at the end,
# for otherwise the system Make on SunOS 4.1 never tries
# to recompile insn-*.o.  To avoid problems and extra noise from
# versions of make which don't like empty commands (nothing after the
# trailing `;'), we call true for each.

insn-config.h: stamp-config 
stamp-config : $(md_file) genconfig.exe
	genconfig $(md_file) > tmp-config.h
	copy tmp-config.h insn-config.h
        echo > stamp-config

insn-flags.h: stamp-flags 
stamp-flags : $(md_file) genflags.exe
	genflags $(md_file) > tmp-flags.h
	copy tmp-flags.h insn-flags.h
        echo > stamp-flags

insn-codes.h: stamp-codes 
stamp-codes : $(md_file) gencodes.exe
	gencodes $(md_file) > tmp-codes.h
	copy tmp-codes.h insn-codes.h
        echo > stamp-codes

insn-emit.o : insn-emit.c $(CONFIG_H) $(RTL_H) expr.h real.h output.h    insn-config.h insn-flags.h insn-codes.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-emit.c

insn-emit.c: stamp-emit 
stamp-emit : $(md_file) genemit.exe
	genemit $(md_file) > tmp-emit.c
	copy tmp-emit.c insn-emit.c
        echo > stamp-emit

insn-recog.o : insn-recog.c $(CONFIG_H) $(RTL_H) insn-config.h $(RECOG_H)    real.h output.h flags.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-recog.c

insn-recog.c: stamp-recog 
stamp-recog : $(md_file) genrecog.exe
	genrecog $(md_file) > tmp-recog.c
	copy tmp-recog.c insn-recog.c
        echo > stamp-recog

insn-opinit.o : insn-opinit.c $(CONFIG_H) $(RTL_H) insn-codes.h insn-flags.h    insn-config.h flags.h $(RECOG_H) expr.h reload.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-opinit.c

insn-opinit.c: stamp-opinit 
stamp-opinit : $(md_file) genopinit.exe
	genopinit $(md_file) > tmp-opinit.c
	copy tmp-opinit.c insn-opinit.c
        echo > stamp-opinit

insn-extract.o : insn-extract.c $(CONFIG_H) $(RTL_H)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-extract.c

insn-extract.c: stamp-extract 
stamp-extract : $(md_file) genextract.exe
	genextract $(md_file) > tmp-extract.c
	copy tmp-extract.c insn-extract.c
        echo > stamp-extract

insn-peep.o : insn-peep.c $(CONFIG_H) $(RTL_H) regs.h output.h real.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-peep.c

insn-peep.c: stamp-peep 
stamp-peep : $(md_file) genpeep.exe
	genpeep $(md_file) > tmp-peep.c
	copy tmp-peep.c insn-peep.c
        echo > stamp-peep

insn-attrtab.o : insn-attrtab.c $(CONFIG_H) $(RTL_H) regs.h real.h output.h       insn-attr.h insn-config.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-attrtab.c

insn-attr.h: stamp-attr 
stamp-attr : $(md_file) genattr.exe
	genattr $(md_file) > tmp-attr.h
	copy tmp-attr.h insn-attr.h
        echo > stamp-attr

insn-attrtab.c: stamp-attrtab 
stamp-attrtab : $(md_file) genattrtab.exe
	  genattrtab $(md_file) > tmp-attrtab.c
	copy tmp-attrtab.c insn-attrtab.c
        echo > stamp-attrtab

insn-output.o : insn-output.c $(CONFIG_H) $(RTL_H) regs.h real.h conditions.h      hard-reg-set.h insn-config.h insn-flags.h insn-attr.h output.h $(RECOG_H)      insn-codes.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-output.c

insn-output.c: stamp-output 
stamp-output : $(md_file) genoutput.exe
	genoutput $(md_file) > tmp-output.c
	copy tmp-output.c insn-output.c
        echo > stamp-output
#

# Compile the programs that generate.exe insn-* from the machine description.
# They are compiled with $(HOST_CC), and associated libraries,
# since they need to run on this machine
# even if GCC is being compiled to run on some other machine.

# $(CONFIG_H) is omitted from the deps of the gen*.o
# because these programs don't really depend on anything 
# about the target machine.  They do depend on config.h itself,
# since that describes the host machine.

# Pass the md file through cpp.exe if the target requests it.
$(MD_FILE): $(MD_DEPS)
	del $@
	$(MD_CPP) $(MD_CPPFLAGS) $(md_file) | sed 's/^# /; /g' > tmp-$@
	mv tmp-$@ $@

genconfig.exe : genconfig.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	  genconfig.o $(HOST_RTL) $(HOST_LIBS)

genconfig.o : genconfig.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genconfig.c

genflags.exe : genflags.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genflags.o $(HOST_RTL) $(HOST_LIBS)

genflags.o : genflags.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genflags.c

gencodes.exe : gencodes.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 gencodes.o $(HOST_RTL) $(HOST_LIBS)

gencodes.o : gencodes.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/gencodes.c

genemit.exe : genemit.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genemit.o $(HOST_RTL) $(HOST_LIBS)

genemit.o : genemit.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genemit.c

genopinit.exe : genopinit.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genopinit.o $(HOST_RTL) $(HOST_LIBS)

genopinit.o : genopinit.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genopinit.c

genrecog.exe : genrecog.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genrecog.o $(HOST_RTL) $(HOST_LIBS)

genrecog.o : genrecog.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genrecog.c

genextract.exe : genextract.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genextract.o $(HOST_RTL) $(HOST_LIBS)

genextract.o : genextract.c $(RTL_H) $(build_xm_file) insn-config.h
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genextract.c

genpeep.exe : genpeep.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genpeep.o $(HOST_RTL) $(HOST_LIBS)

genpeep.o : genpeep.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genpeep.c

genattr.exe : genattr.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genattr.o $(HOST_RTL) $(HOST_LIBS)

genattr.o : genattr.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genattr.c

genattrtab.exe : genattrtab.o $(HOST_RTL) $(HOST_PRINT) $(HOST_RTLANAL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genattrtab.o $(HOST_RTL) $(HOST_PRINT) $(HOST_RTLANAL) $(HOST_LIBS)

genattrtab.o : genattrtab.c $(RTL_H)  $(build_xm_file) insn-config.h
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genattrtab.c

genoutput.exe : genoutput.o $(HOST_RTL) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 genoutput.o $(HOST_RTL) $(HOST_LIBS)

genoutput.o : genoutput.c $(RTL_H) $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genoutput.c
#

# Compile the libraries to be used by gen*.
# If we are not cross-building, gen* use the same .o's that cc1.exe will use,
# and HOST_PREFIX_1 is `foobar', just to ensure these rules don't conflict
# with the rules for rtl.o, alloca.o, etc.
$(HOST_PREFIX_1)rtl.o : $(srcdir)/rtl.c $(CONFIG_H) $(RTL_H)
	del $(HOST_PREFIX)rtl.c
	sed -e 's/config[.]h/hconfig.h/' $(srcdir)/rtl.c > $(HOST_PREFIX)rtl.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)rtl.c

$(HOST_PREFIX_1)print-rtl.o : $(srcdir)/print-rtl.c $(CONFIG_H) $(RTL_H)
	del $(HOST_PREFIX)print-rtl.c
	sed -e 's/config[.]h/hconfig.h/' $(srcdir)/print-rtl.c > $(HOST_PREFIX)print-rtl.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)print-rtl.c

$(HOST_PREFIX_1)rtlanal.o : $(srcdir)/rtlanal.c $(CONFIG_H) $(RTL_H)
	del $(HOST_PREFIX)rtlanal.c
	sed -e 's/config[.]h/hconfig.h/' $(srcdir)/rtlanal.c > $(HOST_PREFIX)rtlanal.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)rtlanal.c

$(HOST_PREFIX_1)alloca.o : alloca.c
	del $(HOST_PREFIX)alloca.c
	cp $(srcdir)/alloca.c $(HOST_PREFIX)alloca.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)alloca.c

$(HOST_PREFIX_1)obstack.o : obstack.c
	del $(HOST_PREFIX)obstack.c
	sed -e 's/config[.]h/hconfig.h/' $(srcdir)/obstack.c > $(HOST_PREFIX)obstack.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)obstack.c

$(HOST_PREFIX_1)malloc.o : malloc.c
	del $(HOST_PREFIX)malloc.c
	sed -e 's/config[.]h/hconfig.h/' $(srcdir)/malloc.c > $(HOST_PREFIX)malloc.c
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)malloc.c

# This satisfies the dependency that we get if you cross-compile a compiler
# that does not need to compile alloca, malloc or whatever.
$(HOST_PREFIX_1): 
        echo > $(HOST_PREFIX_1)
#

# Remake bytecode files.
BI_OBJ=bi-parser.o bi-lexer.o bi-reverse.o

bc-emit.o : bc-emit.c $(CONFIG_H) $(RTL_H) real.h $(BYTECODE_H)     bc-arity.h bc-opcode.h bc-typecd.h bc-typecd.def bi-run.h bytetypes.h
bc-optab.o : bc-optab.c $(CONFIG_H) $(REAL_H) $(BYTECODE_H)     bc-opcode.h bc-typecd.h bc-typecd.def

bi-arity.exe : bi-arity.o $(BI_OBJ) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 bi-arity.o $(BI_OBJ) $(HOST_LIBS)
bi-opcode.exe : bi-opcode.o $(BI_OBJ) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 bi-opcode.o $(BI_OBJ) $(HOST_LIBS)
bi-opname.exe : bi-opname.o $(BI_OBJ) $(HOST_LIBDEPS)
	link $(HOST_LDFLAGS) -out:$@  	 bi-opname.o $(BI_OBJ) $(HOST_LIBS)

$(srcdir)/bi-parser.h: $(srcdir)/bi-parser.c
$(srcdir)/bi-parser.c: $(srcdir)/bi-parser.y
	 $(BISON) $(BISONFLAGS) -d bi-parser.y -o bi-parser.c

bi-parser.o : $(srcdir)/bi-parser.c bi-defs.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES)  	   $(srcdir)/bi-parser.c
bi-lexer.o : bi-lexer.c $(srcdir)/bi-parser.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES)  	   $(srcdir)/bi-lexer.c
bi-arity.o : bi-arity.c bi-defs.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES)  	   $(srcdir)/bi-arity.c
bi-opcode.o : bi-opcode.c bi-defs.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES)  	   $(srcdir)/bi-opcode.c
bi-opname.o : bi-opname.c bi-defs.h $(build_xm_file)
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES)  	   $(srcdir)/bi-opname.c
bi-reverse.o : bi-reverse.c bi-defs.h
	$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES)  	   $(srcdir)/bi-reverse.c

bc-arity.h: stamp-bcarity 
stamp-bcarity : $(srcdir)/bytecode.def bi-arity.exe
	bi-arity < $(srcdir)\bytecode.def >tmp-bc-arity.h
	copy tmp-bc-arity.h bc-arity.h
        echo > stamp-bcarity

bc-opcode.h: stamp-bcopcode 
stamp-bcopcode : $(srcdir)/bytecode.def bi-opcode.exe
	bi-opcode < $(srcdir)\bytecode.def >tmp-bcopcd.h
	copy tmp-bcopcd.h bc-opcode.h
        echo > stamp-bcopcode

bc-opname.h: stamp-bcopname 
stamp-bcopname : $(srcdir)/bytecode.def bi-opname.exe
	bi-opname < $(srcdir)\bytecode.def >tmp-bcopnm.h
	copy tmp-bcopnm.h bc-opname.h
        echo > stamp-bcopname

bytecode.mostlyclean:
	-del bc-arity.h bc-opcode.h bc-opname.h

bytecode.distclean bytecode.clean:	bytecode.mostlyclean
	-del bi-arity.exe bi-opcode bi-opname.exe bi-lexer.exe

bytecode.maintainer-clean: bytecode.clean
	-del bi-parser.c bi-parser.h

#

# Remake cpp.exe and protoize.

# Making the preprocessor
cpp.exe : $(CCCP)$(exeext)
	-del cpp$(exeext)
	ln $(CCCP)$(exeext) cpp$(exeext) > NUL 2>&1  	 || copy $(CCCP)$(exeext) cpp$(exeext)
cccp.exe : cccp.o cexp.o version.o prefix.o $(LIBDEPS)
	link $(LDFLAGS) -out:$@ cccp.o cexp.o prefix.o  	  version.o $(LIBS)
cexp.o : $(srcdir)/cexp.c $(CONFIG_H)
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/cexp.c
$(srcdir)/cexp.c: $(srcdir)/cexp.y
	 $(BISON) -o cexp.c cexp.y

cccp.o : cccp.c $(CONFIG_H) pcp.h version.c 
# The reason we use $(libdir)/g++-include rather than using libsubdir
# is for compatibility with the current version of libg++.
        $(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -DPATH_SEPARATOR=';' -DOBJECT_SUFFIX=\".obj\" -DGCC_INCLUDE_DIR=\"$(libsubdir)/include/\" -DGPLUSPLUS_INCLUDE_DIR=\"$(gxx_include_dir)\" -DOLD_GPLUSPLUS_INCLUDE_DIR=\"$(old_gxx_include_dir)\" -DLOCAL_INCLUDE_DIR=\"$(includedir)\" -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\" -DTOOL_INCLUDE_DIR=\"$(tooldir)/include\" -c cccp.c

cppmain: cppmain.o cpplib.o cpphash.o cppalloc.o cpperror.o cppexp.o    prefix.o version.o $(LIBDEPS)
	link $(LDFLAGS) -out:$@ cppmain.o cpplib.o cpphash.o  	  cppalloc.o cpperror.o cppexp.o prefix.o version.o $(LIBS)

cppmain.o : cppmain.c $(CONFIG_H) cpplib.h

cpplib.o : cpplib.c $(CONFIG_H) cpplib.h cpphash.h 
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)  	  -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\"  	  -DGPLUSPLUS_INCLUDE_DIR=\"$(gxx_include_dir)\"  	  -DOLD_GPLUSPLUS_INCLUDE_DIR=\"$(old_gxx_include_dir)\"  	  -DLOCAL_INCLUDE_DIR=\"$(includedir)\"  	  -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\"  	  -DTOOL_INCLUDE_DIR=\"$(tooldir)/include\"  	  -c cpplib.c

cpperror.o : cpperror.c $(CONFIG_H) cpplib.h

cppexp.o : cppexp.c $(CONFIG_H) cpplib.h

cpphash.o : cpphash.c cpplib.h cpphash.h

cppalloc.o : cppalloc.c $(CONFIG_H)

# Note for the stamp targets, we run the program `true' instead of
# having an empty command (nothing following the semicolon).

proto:  protoize unprotoize SYSCALLS.c.X

protoize: protoize.o getopt.o getopt1.o getpwd.o version.o      pexecute.o choose-temp.o $(LIBDEPS)
	link $(LDFLAGS) -out:$@  	  protoize.o getopt.o getopt1.o getpwd.o version.o  	  pexecute.o choose-temp.o $(LIBS)
protoize.o : stamp-proto 

unprotoize: unprotoize.o getopt.o getopt1.o getpwd.o version.o      pexecute.o choose-temp.o $(LIBDEPS)
	link $(LDFLAGS) -out:$@  	  unprotoize.o getopt.o getopt1.o getpwd.o version.o  	  pexecute.o choose-temp.o $(LIBS)
unprotoize.o :	stamp-proto 

stamp-proto: protoize.c getopt.h $(CONFIG_H)
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)            -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\"  	  -DGPLUSPLUS_INCLUDE_DIR=\"$(gxx_include_dir)\"            -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\"  	  -DTOOL_INCLUDE_DIR=\"$(tooldir)/include\"  	  -DLOCAL_INCLUDE_DIR=\"$(includedir)\"  	  -DSTD_PROTO_DIR=\"$(libsubdir)\"  	  -DUNPROTOIZE $(srcdir)/protoize.c
	mv protoize$(objext) unprotoize$(objext)
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)            -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\"  	  -DGPLUSPLUS_INCLUDE_DIR=\"$(gxx_include_dir)\"            -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\"  	  -DTOOL_INCLUDE_DIR=\"$(tooldir)/include\"  	  -DLOCAL_INCLUDE_DIR=\"$(includedir)\"  	  -DSTD_PROTO_DIR=\"$(libsubdir)\"  	  $(srcdir)/protoize.c
        echo > stamp-proto

getopt.o : getopt.c getopt.h
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/getopt.c
getopt1.o : getopt1.c getopt.h
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/getopt1.c

# This info describes the target machine, so compile with GCC just built.
SYSCALLS.c.X: $(srcdir)/sys-types.h $(srcdir)/sys-protos.h $(GCC_PASSES)     stmp-int-hdrs
	-del SYSCALLS.c tmp-SYSCALLS.s
	cat $(srcdir)/sys-types.h $(srcdir)/sys-protos.h > SYSCALLS.c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)  	  -aux-info $@ -S -o tmp-SYSCALLS.s SYSCALLS.c
	-del SYSCALLS.c tmp-SYSCALLS.s


test-protoize-simple: ./protoize ./unprotoize $(GCC_PASSES)
	-del tmp-proto.[cso]
	cp $(srcdir)/protoize.c tmp-proto.c
	chmod u+w tmp-proto.c
	protoize -N -B ./ -x getopt.h -c "-B./ -Wall -Wwrite-strings  	  $(CFLAGS) $(INCLUDES)  	  -DGCC_INCLUDE_DIR=0  	  -DGPLUSPLUS_INCLUDE_DIR=0  	  -DCROSS_INCLUDE_DIR=0  	  -DTOOL_INCLUDE_DIR=0  	  -DSTD_PROTO_DIR=0" tmp-proto.c
	@echo '**********' Expect 400 lines of differences.
	-diff $(srcdir)/protoize.c tmp-proto.c > tmp-proto.diff
	-wc -l tmp-proto.diff
	unprotoize -N -x getopt.h -c "-B./ -Wall -Wwrite-strings  	  $(CFLAGS) $(INCLUDES)  	  -DGCC_INCLUDE_DIR=0  	  -DGPLUSPLUS_INCLUDE_DIR=0  	  -DCROSS_INCLUDE_DIR=0  	  -DTOOL_INCLUDE_DIR=0  	  -DSTD_PROTO_DIR=0" tmp-proto.c
	@echo Expect zero differences.
	diff $(srcdir)/protoize.c tmp-proto.c | cat
	-del tmp-proto.[cs] tmp-proto$(objext)

gcov.o : gcov.c gcov-io.h

gcov: gcov.o $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) gcov.o $(LIBS) -o $@
#

# Build the include directory.  The stamp files are stmp-* rather than
# stamp-* so that mostlyclean does not force the include directory to
# be rebuilt.


# Copy in the headers provided with gcc.
USER_H = $(srcdir)\ginclude\stdarg.h $(srcdir)\ginclude\stddef.h      $(srcdir)\ginclude\varargs.h $(srcdir)\ginclude\va-alpha.h      $(srcdir)\ginclude\va-h8300.h $(srcdir)\ginclude\va-i860.h      $(srcdir)\ginclude\va-i960.h $(srcdir)\ginclude\va-mips.h      $(srcdir)\ginclude\va-m88k.h $(srcdir)\ginclude\va-pa.h      $(srcdir)\ginclude\va-pyr.h $(srcdir)\ginclude\va-sparc.h      $(srcdir)\ginclude\va-clipper.h $(srcdir)\ginclude\va-spur.h      $(srcdir)\ginclude\iso646.h      $(srcdir)\ginclude\proto.h

# Build the include directory except for float.h (which depends upon
# enquire).

stmp-int-hdrs: $(USER_H)
	type $(srcdir)\limitx.h >xlimits.h
	type $(srcdir)\glimits.h >>xlimits.h
	type $(srcdir)\limity.h >>xlimits.h

	-mkdir include	
	for %%f in ($(USER_H)) do copy %%f include
	del include\limits.h
	copy xlimits.h include\limits.h
	del include\syslimits.h
	copy $(srcdir)\gsyslimits.h include\syslimits.h
	copy include\limits.h include\syslimits.h
	del include\README
	copy $(srcdir)\README-fixinc include\README
        echo > stmp-int-hdrs

stmp-headers: stmp-int-hdrs fixinc-nt.exe
	fixinc-nt
        echo > stmp-headers

# Build float.h.
stmp-float_h: libgcc.lib enquire.exe
	-.\enquire -f > tmp-float.h
	del include\float.h
	copy tmp-float.h include\float.h
        echo > stmp-float_h

fixinc-nt.o: $(srcdir)/config/winnt/fixinc-nt.c
	cl -c -I. -I$(srcdir) -I$(srcdir)/include -I$(srcdir)/config/winnt $(srcdir)/config/winnt/fixinc-nt.c

fixinc-nt.exe: fixinc-nt.o dirent.o
	cl fixinc-nt.o dirent.o libc.lib kernel32.lib
# Top level makefile fragment for GNU C++.
#   Copyright (C) 1994, 1995, 1997 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g++)
# - the compiler proper (eg: cc1plus)
# - define the names for selecting the language in LANGUAGES.
#

# Extra flags to pass to recursive makes.
CXX_FLAGS_TO_PASS =  	"CXX_FOR_BUILD=$(CXX_FOR_BUILD)"  	"CXXFLAGS=$(CXXFLAGS)"  	"CXX_FOR_TARGET=$(CXX_FOR_TARGET)"

# Actual names to use when installing a native compiler.
CXX_INSTALL_NAME = `t='$(program_transform_name)'; echo c++ | sed $$t`
GXX_INSTALL_NAME = `t='$(program_transform_name)'; echo g++ | sed $$t`

# Actual names to use when installing a cross-compiler.
CXX_CROSS_NAME = `t='$(program_transform_cross_name)'; echo c++ | sed $$t`
GXX_CROSS_NAME = `t='$(program_transform_cross_name)'; echo g++ | sed $$t`

# The name to use for the demangler program.
DEMANGLER_PROG = c++filt

# Extra headers to install.
CXX_EXTRA_HEADERS = $(srcdir)/cp/inc/typeinfo $(srcdir)/cp/inc/exception  	$(srcdir)/cp/inc/new $(srcdir)/cp/inc/new.h

# Extra code to include in libgcc2.
CXX_LIB2FUNCS = tinfo.o tinfo2.o new.o new1.o new2.o exception.o
CXX_LIB2SRCS = $(srcdir)/cp/new.cc $(srcdir)/cp/new1.cc $(srcdir)/cp/new2.cc  	$(srcdir)/cp/exception.cc $(srcdir)/cp/tinfo.cc  	$(srcdir)/cp/tinfo2.cc $(srcdir)/cp/tinfo.h
#

# Define the names for selecting c++ in LANGUAGES.
# Note that it would be nice to move the dependency on g++
# into the C++ rule, but that needs a little bit of work
# to do the right thing within all.cross.
C++ c++: cc1plus

# Tell GNU make to ignore these if they exist.
.PHONY: C++ c++

g++.c: $(srcdir)/gcc.c
	-del $@
	$(LN) $(srcdir)/gcc.c $@

g++spec.o : $(srcdir)/cp/g++spec.c
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/cp/g++spec.c

# N.B.: This is a copy of the gcc.o rule, with -DLANG_SPECIFIC_DRIVER added.
# It'd be nice if we could find an easier way to do this---rather than have
# to track changes to the toplevel gcc Makefile as well.
# We depend on g++.c last, to make it obvious where it came from.
g++.o : $(CONFIG_H) multilib.h  $(lang_specs_files) g++.c
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)  	$(DRIVER_DEFINES)  	-DLANG_SPECIFIC_DRIVER    -c g++.c

# Create the compiler driver for g++.
g++$(exeext): g++.o g++spec.o version.o choose-temp.o pexecute.o prefix.o $(LIBDEPS) $(EXTRA_GCC_OBJS)
	link $(LDFLAGS) -out:$@ g++.o g++spec.o prefix.o  	  version.o choose-temp.o pexecute.o $(EXTRA_GCC_OBJS) $(LIBS)

# Create a version of the g++ driver which calls the cross-compiler.
g++-cross$(exeext): g++$(exeext)
	-del g++-cross$(exeext)
	cp g++$(exeext) g++-cross$(exeext)

cxxmain.o : cplus-dem.c demangle.h
	del cxxmain.c
	$(LN) $(srcdir)/cplus-dem.c cxxmain.c
	$(CC) -c -DMAIN $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)  	  -DVERSION=\"$(version)\" cxxmain.c
	del cxxmain.c

$(DEMANGLER_PROG): cxxmain.o underscore.o getopt.o getopt1.o $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) $(LIBS) -o $@  	  cxxmain.o underscore.o getopt.o getopt1.o

CXX_SRCS = $(srcdir)/cp/call.c $(srcdir)/cp/decl2.c   $(srcdir)/cp/except.c $(srcdir)/cp/input.c $(srcdir)/cp/pt.c   $(srcdir)/cp/spew.c $(srcdir)/cp/xref.c $(srcdir)/cp/class.c   $(srcdir)/cp/expr.c $(srcdir)/cp/lex.c   $(srcdir)/cp/ptree.c $(srcdir)/cp/tree.c $(srcdir)/cp/cvt.c   $(srcdir)/cp/errfn.c $(srcdir)/cp/rtti.c $(srcdir)/cp/method.c   $(srcdir)/cp/search.c $(srcdir)/cp/typeck.c $(srcdir)/cp/decl.c   $(srcdir)/cp/error.c $(srcdir)/cp/friend.c $(srcdir)/cp/init.c   $(srcdir)/cp/parse.y $(srcdir)/cp/sig.c $(srcdir)/cp/typeck2.c   $(srcdir)/cp/repo.c

cc1plus: $(P) $(CXX_SRCS) $(LIBDEPS) stamp-objlist c-common.o c-pragma.o
	cd cp; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) ../cc1plus
#

# Build hooks:

c++.all.build: g++$(exeext) $(DEMANGLER_PROG)
c++.all.cross: g++-cross$(exeext) $(DEMANGLER_PROG)
c++.start.encap: g++$(exeext)
c++.rest.encap: $(DEMANGLER_PROG)

c++.info:
c++.dvi:

# C++ language-support library pieces for libgcc.
tinfo.o : cc1plus $(srcdir)/cp/tinfo.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES)  	  -c $(srcdir)/cp/tinfo.cc
tinfo2.o : cc1plus $(srcdir)/cp/tinfo2.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES)  	  -c $(srcdir)/cp/tinfo2.cc
exception.o : cc1plus $(srcdir)/cp/exception.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES)  	  -c -fexceptions $(srcdir)/cp/exception.cc
new.o : cc1plus $(srcdir)/cp/new.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES)  	  -c $(srcdir)/cp/new.cc
new1.o : cc1plus $(srcdir)/cp/new1.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES)  	  -c $(srcdir)/cp/new1.cc
new2.o : cc1plus $(srcdir)/cp/new2.cc
	$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES)  	  -c $(srcdir)/cp/new2.cc

# We want to update cplib2.txt if any of the source files change...
cplib2.txt: $(CXX_LIB2SRCS) $(CXX_EXTRA_HEADERS) cplib2.ready
	case " $(LANGUAGES) " in  	*" "[cC]"++ "*)  	  echo $(CXX_LIB2FUNCS) > cplib2.new;;  	*)  	  echo "" > cplib2.new;;  	esac
	mv -f cplib2.new cplib2.txt 

# Or if it would be different.
cplib2.ready: $(GCC_PASSES) $(LANGUAGES) $(LIBGCC2_DEPS) stmp-int-hdrs
        @if [ -r cplib2.txt ]; then       case " $(LANGUAGES) " in        *" "[cC]"++ "*)           echo $(CXX_LIB2FUNCS) > cplib2.new;;          *)        echo "" > cplib2.new;;        esac;           if cmp -s cplib2.new cplib2.txt; then true; else          echo > cplib2.ready;           fi;     del cplib2.new;       else true ;     fi
        @if [ -f cplib2.ready ]; then true; else          echo > cplib2.ready;   fi
#

# Install hooks:
# cc1plus is installed elsewhere as part of $(COMPILERS).

# Nothing to do here.
c++.install-normal:

# Install the driver program as $(target)-g++
# and also as either g++ (if native) or $(tooldir)/bin/g++.
c++.install-common:
	-if [ -f cc1plus$(exeext) ] ; then  	  if [ -f g++-cross$(exeext) ] ; then  	    del $(bindir)/$(GXX_CROSS_NAME)$(exeext);  	    $(INSTALL_PROGRAM) g++-cross$(exeext) $(bindir)/$(GXX_CROSS_NAME)$(exeext);  	    chmod a+x $(bindir)/$(GXX_CROSS_NAME)$(exeext);  	    del $(bindir)/$(CXX_CROSS_NAME)$(exeext);  	    ln $(bindir)/$(GXX_CROSS_NAME)$(exeext) $(bindir)/$(CXX_CROSS_NAME)$(exeext)  	      > NUL 2>&1  	      || copy $(bindir)/$(GXX_CROSS_NAME)$(exeext) $(bindir)/$(CXX_CROSS_NAME)$(exeext) ;  	  else  	    del $(bindir)/$(GXX_INSTALL_NAME)$(exeext);  	    $(INSTALL_PROGRAM) g++$(exeext) $(bindir)/$(GXX_INSTALL_NAME)$(exeext);  	    chmod a+x $(bindir)/$(GXX_INSTALL_NAME)$(exeext);  	    del $(bindir)/$(CXX_INSTALL_NAME)$(exeext);  	    ln $(bindir)/$(GXX_INSTALL_NAME)$(exeext) $(bindir)/$(CXX_INSTALL_NAME)$(exeext)  	      > NUL 2>&1  	      || copy $(bindir)/$(GXX_INSTALL_NAME)$(exeext) $(bindir)/$(CXX_INSTALL_NAME)$(exeext) ;  	  fi ;  	fi

c++.install-info:

c++.install-man: $(srcdir)/cp/g++.1
	-if [ -f cc1plus$(exeext) ] ; then  	  if [ -f g++-cross$(exeext) ] ; then  	    del $(mandir)/$(GXX_CROSS_NAME)$(manext);  	    $(INSTALL_DATA) $(srcdir)/cp/g++.1 $(mandir)/$(GXX_CROSS_NAME)$(manext);  	    chmod a-x $(mandir)/$(GXX_CROSS_NAME)$(manext);  	  else  	    del $(mandir)/$(GXX_INSTALL_NAME)$(manext);  	    $(INSTALL_DATA) $(srcdir)/cp/g++.1 $(mandir)/$(GXX_INSTALL_NAME)$(manext);  	    chmod a-x $(mandir)/$(GXX_INSTALL_NAME)$(manext);  	  fi;  	else true; fi

c++.uninstall:
	-rm -rf $(bindir)/$(CXX_INSTALL_NAME)$(exeext)
	-rm -rf $(bindir)/$(CXX_CROSS_NAME)$(exeext)
	-rm -rf $(bindir)/$(GXX_INSTALL_NAME)$(exeext)
	-rm -rf $(bindir)/$(GXX_CROSS_NAME)$(exeext)
	-rm -rf $(mandir)/$(GXX_INSTALL_NAME)$(manext)
	-rm -rf $(mandir)/$(GXX_CROSS_NAME)$(manext)
#

# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.

c++.mostlyclean:
	-del cp/*$(objext) $(DEMANGLER_PROG)
c++.clean:
	-del cplib2.txt cplib2.ready
c++.distclean:
	-del cp/ cp/Makefile
	-del cp/parse.output
	-del g++.c
c++.extraclean:
c++.maintainer-clean:
	-del cp/parse.c cp/parse.h
#

# Stage hooks:
# The main makefile has already created stage?/cp.

c++.stage1: stage1-start
	-mv cp/*$(objext) stage1/cp
c++.stage2: stage2-start
	-mv cp/*$(objext) stage2/cp
c++.stage3: stage3-start
	-mv cp/*$(objext) stage3/cp
c++.stage4: stage4-start
	-mv cp/*$(objext) stage4/cp
#

# Maintenance hooks:

# This target creates the files that can be rebuilt, but go in the
# distribution anyway.  It then copies the files to the distdir directory.
c++.distdir:
	mkdir tmp/cp
	mkdir tmp/cp/inc
	cd cp ; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) parse.c hash.h
	cd cp;  	for file in *[0-9a-zA-Z+]; do  	  ln $$file ../tmp/cp >NUL 2>&1 || copy $$file ../tmp/cp;  	done
	cd cp/inc;  	for file in *[0-9a-zA-Z+]; do  	  ln $$file ../../tmp/cp/inc >NUL 2>&1  	   || copy $$file ../../tmp/cp/inc;  	done
lang.mostlyclean:  c++.mostlyclean	 
lang.clean:  c++.clean	 
lang.distclean:  c++.distclean	 
lang.realclean:  c++.realclean	 
# Top level makefile fragment for GNU Objective-C
#   Copyright (C) 1997 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g++)
# - the compiler proper (eg: cc1plus)
# - define the names for selecting the language in LANGUAGES.
#

# Extra flags to pass to recursive makes.
OBJC_FLAGS_TO_PASS =  	"OBJC_FOR_BUILD=$(OBJC_FOR_BUILD)"  	"OBJCFLAGS=$(OBJCFLAGS)"  	"OBJC_FOR_TARGET=$(OBJC_FOR_TARGET)"  
# Actual names to use when installing a native compiler.
#OBJC_INSTALL_NAME = `t='$(program_transform_name)'; echo c++ | sed $$t`

# Actual names to use when installing a cross-compiler.
#OBJC_CROSS_NAME = `t='$(program_transform_cross_name)'; echo c++ | sed $$t`

#

# Define the names for selecting Objective-C in LANGUAGES.
OBJC objc: cc1obj.exe objc-runtime
OBJECTIVE-C objective-c: cc1obj.exe objc-runtime

# Tell GNU make to ignore these if they exist.
.PHONY: objective-c objc ObjC

# The Objective C thread file
OBJC_THREAD_FILE=thr-$(GCC_THREAD_FILE)

# Language-specific object files for Objective C.
OBJC_OBJS = objc-parse.o objc-act.o $(C_AND_OBJC_OBJS)

cc1obj.exe : $(P) $(OBJC_OBJS) $(OBJS) $(BC_OBJS) $(LIBDEPS)
        link $(LDFLAGS) -out:$@ $(OBJC_OBJS) @psx.rsp $(out_object_file)  $(BC_OBJS) $(LIBS)

# Objective C language specific files.

objc-parse.o : $(srcdir)/objc/objc-parse.c     $(CONFIG_H) $(TREE_H)     $(srcdir)/c-lex.h $(srcdir)/c-tree.h $(srcdir)/input.h     $(srcdir)/flags.h $(srcdir)/output.h $(srcdir)/objc/objc-act.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc  	-c $(srcdir)/objc/objc-parse.c

$(srcdir)/objc/objc-parse.c : $(srcdir)/objc/objc-parse.y
	cd $(srcdir)/objc;  	$(BISON) $(BISONFLAGS) objc-parse.y -o objc-parse.c

$(srcdir)/objc/objc-parse.y: c-parse.in
	echo '/*WARNING: This file is automatically generated!*/' >tmp-objc-prs.y
	sed -e "/^ifc$$/,/^end ifc$$/d"  	  -e "/^ifobjc$$/d" -e "/^end ifobjc$$/d"  	  c-parse.in >>tmp-objc-prs.y
	copy tmp-objc-prs.y $(srcdir)/objc/objc-parse.y

objc-act.o : $(srcdir)/objc/objc-act.c     $(CONFIG_H) $(TREE_H) $(RTL_H)     $(srcdir)/c-tree.h $(srcdir)/c-lex.h     $(srcdir)/flags.h $(srcdir)/objc/objc-act.h $(srcdir)/input.h     $(srcdir)/function.h $(srcdir)/output.h c-parse.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc  	-c $(srcdir)/objc/objc-act.c

objc-runtime: objc-headers libobjc.a

# copy objc header files into build directory
objc-headers: stmp-fixinc
	if [ -d include ]; then true; else mkdir include; fi
	cd objc;  	if [ -f Makefile ]; then  	  $(MAKE) copy-headers  	  tooldir=$(tooldir)  	  AR="$(AR)" AR_FLAGS="$(AR_FLAGS)"  	  GCC_FOR_TARGET="../xgcc.exe -B../"  	  GCC_CFLAGS="$(GCC_CFLAGS)" incinstalldir=../include;  	fi
	touch objc-headers

# Objective C runtime library specific files.

OBJC_O = objc/hash.o objc/sarray.o  	objc/class.o objc/sendmsg.o  	objc/init.o objc/archive.o  	objc/encoding.o objc/selector.o  	objc/objects.o objc/misc.o  	objc/NXConstStr.o objc/Object.o  	objc/Protocol.o objc/nil_method.o  	objc/thr.o objc/linking.o  	objc/$(OBJC_THREAD_FILE).o

objc/hash.o : $(srcdir)/objc/hash.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-c $(srcdir)/objc/hash.c -o $@
objc/sarray.o : $(srcdir)/objc/sarray.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-c $(srcdir)/objc/sarray.c -o $@
objc/class.o : $(srcdir)/objc/class.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-c $(srcdir)/objc/class.c -o $@
objc/sendmsg.o : $(srcdir)/objc/sendmsg.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) -Iobjc  	-c $(srcdir)/objc/sendmsg.c -o $@
objc/init.o : $(srcdir)/objc/init.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-c $(srcdir)/objc/init.c -o $@
objc/archive.o : $(srcdir)/objc/archive.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-c $(srcdir)/objc/archive.c -o $@
objc/encoding.o : $(srcdir)/objc/encoding.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-c $(srcdir)/objc/encoding.c -o $@
objc/selector.o : $(srcdir)/objc/selector.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-c $(srcdir)/objc/selector.c -o $@
objc/objects.o : $(srcdir)/objc/objects.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-c $(srcdir)/objc/objects.c -o $@
objc/misc.o : $(srcdir)/objc/misc.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-c $(srcdir)/objc/misc.c -o $@
objc/NXConstStr.o : $(srcdir)/objc/NXConstStr.m $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-fgnu-runtime -c $(srcdir)/objc/NXConstStr.m -o $@
objc/Object.o : $(srcdir)/objc/Object.m $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-fgnu-runtime -c $(srcdir)/objc/Object.m -o $@
objc/Protocol.o : $(srcdir)/objc/Protocol.m $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-fgnu-runtime -c $(srcdir)/objc/Protocol.m -o $@
objc/thr.o : $(srcdir)/objc/thr.h $(srcdir)/objc/thr.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-c $(srcdir)/objc/thr.c -o $@
objc/$(OBJC_THREAD_FILE).o : $(srcdir)/objc/$(OBJC_THREAD_FILE).c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-c $(srcdir)/objc/$(OBJC_THREAD_FILE).c -o $@
objc/nil_method.o : $(srcdir)/objc/nil_method.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-c $(srcdir)/objc/nil_method.c -o $@
objc/linking.o : $(srcdir)/objc/linking.m $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-fgnu-runtime -c $(srcdir)/objc/linking.m -o $@

objc/libobjc_entry.o : $(srcdir)/objc/libobjc_entry.c $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES)  	-c $(srcdir)/objc/libobjc_entry.c -o $@

# Build the Objective C runtime library.
libobjc.a: cc1obj.exe specs stmp-int-hdrs libgcc2.ready   $(USE_COLLECT2) $(EXTRA_PARTS) objc/runtime-info.h $(OBJC_O)
	-del libobjc.a
	$(AR) $(AR_FLAGS) libobjc.a $(OBJC_O)
	-if $(RANLIB_TEST) ; then $(RANLIB) libobjc.a; else true; fi

libobjc_s.a: libobjc.a
	mv libobjc.a libobjc_s.a

# Create a relocatable DLL
libobjc.dll: libobjc_s.a objc/libobjc_entry.o
	$(GCC_FOR_TARGET) -mdll -Wl,--base-file -Wl,libobjc.base  		-o libobjc.dll libobjc_s.a  		objc/libobjc_entry.o -lkernel32
	$(DLLTOOL) --dllname libobjc.dll --def $(srcdir)/objc/libobjc.def  		--base-file libobjc.base --output-exp libobjc.exp
	$(GCC_FOR_TARGET) -mdll -Wl,--base-file libobjc.base libobjc.exp  		-o libobjc.dll libobjc_s.a  		objc/libobjc_entry.o -lkernel32
	$(DLLTOOL) --dllname libobjc.dll --def $(srcdir)/objc/libobjc.def  		--base-file libobjc.base --output-exp libobjc.exp
	$(GCC_FOR_TARGET) libobjc.exp -mdll  		-o libobjc.dll libobjc_s.a  		objc/libobjc_entry.o -lkernel32
	$(DLLTOOL) --dllname libobjc.dll --def $(srcdir)/objc/libobjc.def  		--output-lib libobjc.a

# Platform generated.exe information needed by ObjC runtime
objc/runtime-info.h: cc1obj.exe
	echo "" > emptyfile
	echo "/* This file is automatically generated.exe */" >$@
	cc1obj.exe -print-objc-runtime-info emptyfile >>$@

#

# Build hooks:

objc.all.build:
objc.all.cross:
objc.start.encap:
objc.rest.encap:

objc.info:
objc.dvi:

#

# Install hooks:
# cc1obj.exe is installed elsewhere as part of $(COMPILERS).

objc.install-normal: installdirs
	-if [ -f libobjc.a ] ; then  	  del $(libsubdir)/libobjc.a;  	  $(INSTALL_DATA) libobjc.a $(libsubdir)/libobjc.a;  	  if $(RANLIB_TEST) ; then  	    (cd $(libsubdir); $(RANLIB) libobjc.a); else true; fi;  	  chmod a-x $(libsubdir)/libobjc.a;  	else true; fi
	-if [ -f libobjc_s.a ] ; then  	  del $(libsubdir)/libobjc_s.a;  	  $(INSTALL_DATA) libobjc_s.a $(libsubdir)/libobjc_s.a;  	  if $(RANLIB_TEST) ; then  	    (cd $(libsubdir); $(RANLIB) libobjc_s.a); else true; fi;  	  chmod a-x $(libsubdir)/libobjc_s.a;  	else true; fi
	-if [ -f libobjc.dll ] ; then  	  del $(bindir)/libobjc.dll;  	  $(INSTALL_DATA) libobjc.dll $(bindir)/libobjc.dll;  	else true; fi

objc.install-common:

objc.install-info:

objc.install-man:

objc.uninstall:
#

# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.
objc.mostlyclean:
	-del tmp-objc-prs.y
	-del objc/*$(objext) objc/xforward objc/fflags
	-del objc/runtime-info.h
	-del libobjc.a libobjc_s.a libobjc.dll
	-del libobjc.base libobjc.exp
objc.clean: objc.mostlyclean
	-rm -rf objc-headers
objc.distclean:
	-del objc/Makefile objc/Make-host objc/Make-target
	-del objc/ objc/config.cache
	-del objc-parse.output
objc.extraclean:
objc.maintainer-clean:
	-del objc/objc-parse.y
	-del objc/objc-parse.c objc/objc-parse.output

#

# Stage hooks:

objc.stage1:
	-mv objc/*$(objext) stage1/objc
	-mv cc1obj$(exeext) stage1
	-mv libobjc.a stage1
objc.stage2:
	-mv objc/*$(objext) stage2/objc
	-mv cc1obj$(exeext) stage2
	-mv libobjc.a stage2
objc.stage3:
	-mv objc/*$(objext) stage3/objc
	-mv cc1obj$(exeext) stage3
	-mv libobjc.a stage3
objc.stage4:
	-mv objc/*$(objext) stage4/objc
	-mv cc1obj$(exeext) stage4
	-mv libobjc.a stage4

#

# Maintenance hooks:

# This target creates the files that can be rebuilt, but go in the
# distribution anyway.  It then copies the files to the distdir directory.
objc.distdir:
	mkdir tmp/objc
	cd objc ; $(MAKE) $(FLAGS_TO_PASS) objc-parse.c
	cd objc;  	for file in *[0-9a-zA-Z+]; do  	  ln $$file ../tmp/objc >NUL 2>&1 || copy $$file ../tmp/objc;  	done
